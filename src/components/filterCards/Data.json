{
  "records": [
      {
          "id": "rec1NLCRTTolKRkba",
          "createdTime": "2023-01-03T14:50:50.000Z",
          "fields": {
              "Example": "Valid uses of the \"!\" to indicate that a field or list can't be null applied to fields and lists.\n\nString! - returns a string that can't be null\n[Words] - returns a list and can return a null list or null members.\n[Words!] - returns a list that can be null but its members can't be\n[Words]!- returns a list that can't be null but its members can return null\n[Words!]!- returns a list that can't be null and can't have null members\n",
              "Description": "Nullability in GraphQL is the designation of a field or list as returning a null value or not. Fields that are nonnull or where null is not an acceptable response are identified with an exclamation mark.\n",
              "Term": "DUMMY DATA Nullability",
              "Tags": [
                  "nonnull",
                  "null"
              ]
          }
      },
      {
          "id": "rec2KXGE09ELJZgei",
          "createdTime": "2022-12-14T12:37:34.000Z",
          "fields": {
              "Term": "DUMMY DATA Federation"
          }
      },
      {
          "id": "rec51ZynGYzsMpRhU",
          "createdTime": "2023-01-03T14:50:07.000Z",
          "fields": {
              "Example": "schema\n`type Mutation {`\n`  createUser(name: String!, email: String!): User`\n`  updateUser(id: ID!, name: String, email: String): User`\n`  deleteUser(id: ID!): User`\n```\n}\n```\n",
              "Description": "A mutation is a write operation followed by a fetch. It enables the user to mutate (add, update, or delete) specified fields and then query the modified value on the object returned. \n",
              "Term": "DUMMY DATA Mutation",
              "Tags": [
                  "graphql",
                  "operation"
              ]
          }
      }
  ]
}